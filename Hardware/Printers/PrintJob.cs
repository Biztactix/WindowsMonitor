using System;
using System.Collections.Generic;
using System.Management;

namespace ComputerManagment
{
    /// <summary>
    ///     The Win32_PrintJob class represents a print job generated by a Win32 application. Any unit of work generated by the
    ///     Print command of an application running on a Win32 system is a descendent (or member) of this class. Example: A
    ///     print document created by an Office 97 application
    /// </summary>
    public sealed class PrintJob
    {
        public string Caption { get; private set; }

        /// <summary>
        ///     The Color property indicates whether the document is to be printed in color or monochrome.  Some color printers
        ///     have the capability to print using true black instead of a combination of Yellow, Cyan, and Magenta.  This usually
        ///     creates darker and sharper text for documents.  This option is only useful for color printers that support true
        ///     black printing.
        /// </summary>
        public string Color { get; private set; }

        /// <summary>
        ///     The DataType property indicates the format of the data for this print job. This instructs the printer driver to
        ///     eithertranslate the data (generic text, PostScript, or PCL) before printing, or to print in a raw format (for
        ///     graphics and pictures).
        ///     Example: TEXT
        /// </summary>
        public string DataType { get; private set; }

        public string Description { get; private set; }

        /// <summary>
        ///     The Document property specifies the name of the print job. The user sees this name when viewing documents waiting
        ///     to be printed.
        ///     Example: Microsoft Word - Review.doc
        /// </summary>
        public string Document { get; private set; }

        /// <summary>
        ///     The DriverName property indicates the name of the printer driver used for the print job.
        /// </summary>
        public string DriverName { get; private set; }

        public DateTime ElapsedTime { get; private set; }

        /// <summary>
        ///     The HostPrintQueue property contains the name of the computer on which the print job was created.
        /// </summary>
        public string HostPrintQueue { get; private set; }

        public DateTime InstallDate { get; private set; }

        /// <summary>
        ///     The JobId property indicates the identifier number of the job. It is used by other methods as a handle to a single
        ///     job spooling to the printer.
        /// </summary>
        public uint JobId { get; private set; }

        public string JobStatus { get; private set; }

        /// <summary>
        ///     The Name property contains the name of the printer to which the print job is being spooled.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        ///     User to be notified upon job completion or failure. This property is restricted to 16 characters under Windows 9x
        ///     platforms.
        /// </summary>
        public string Notify { get; private set; }

        public string Owner { get; private set; }

        /// <summary>
        ///     The PagesPrinted property specifies the number of pages that have been printed. This value may be zero if the print
        ///     job does not contain page delimiting information.
        /// </summary>
        public uint PagesPrinted { get; private set; }

        /// <summary>
        ///     The PaperLength property indicates the length of the paper.
        ///     Example: 2794
        /// </summary>
        public uint PaperLength { get; private set; }

        /// <summary>
        ///     The PaperSize property indicates the size of the paper.
        ///     Example: A4 or Letter
        /// </summary>
        public string PaperSize { get; private set; }

        /// <summary>
        ///     The PaperWidth property indicates the width of the paper.
        ///     Example: 2159
        /// </summary>
        public uint PaperWidth { get; private set; }

        /// <summary>
        ///     The Parameters property indicates optional parameters to send to the print processor. See the PrintProcessor member
        ///     for more information.
        /// </summary>
        public string Parameters { get; private set; }

        /// <summary>
        ///     The PrintProcessor property indicates the print processor service used to process the print job. A printer
        ///     processor works in conjunction with the printer driver to provide additional translation of printer data for the
        ///     printer, and can also be used to provide special options such as a title page for the job.
        /// </summary>
        public string PrintProcessor { get; private set; }

        public uint Priority { get; private set; }

        /// <summary>
        ///     The Size property indicates the size of the print job.
        /// </summary>
        public uint Size { get; private set; }

        /// <summary>
        ///     The SizeHigh property indicates the size of the print job if the Size property exceeds 4,294,967,295 bytes.
        /// </summary>
        public uint SizeHigh { get; private set; }

        public DateTime StartTime { get; private set; }
        public string Status { get; private set; }

        /// <summary>
        ///     The StatusMask property specifies a bitmap of the possible statuses relating to this print job.
        /// </summary>
        public uint StatusMask { get; private set; }

        public DateTime TimeSubmitted { get; private set; }

        /// <summary>
        ///     The TotalPages property specifies the number of pages required to complete the job. This value may be zero if the
        ///     print job does not contain page-delimiting information.
        /// </summary>
        public uint TotalPages { get; private set; }

        public DateTime UntilTime { get; private set; }

        public static PrintJob[] Retrieve(string remote, string username, string password)
        {
            var options = new ConnectionOptions
            {
                Impersonation = ImpersonationLevel.Impersonate,
                Username = username,
                Password = password
            };

            var managementScope = new ManagementScope(new ManagementPath($"\\\\{remote}\\root\\cimv2"), options);
            managementScope.Connect();

            return Retrieve(managementScope);
        }

        public static PrintJob[] Retrieve()
        {
            var managementScope = new ManagementScope(new ManagementPath("root\\cimv2"));
            return Retrieve(managementScope);
        }

        public static PrintJob[] Retrieve(ManagementScope managementScope)
        {
            var objectQuery = new ObjectQuery("SELECT * FROM Win32_PrintJob");
            var objectSearcher = new ManagementObjectSearcher(managementScope, objectQuery);
            var objectCollection = objectSearcher.Get();

            var list = new List<PrintJob>();

            foreach (ManagementObject managementObject in objectCollection)
                list.Add(new PrintJob
                {
                    Caption = (string) managementObject.Properties["Caption"].Value,
                    Color = (string) managementObject.Properties["Color"].Value,
                    DataType = (string) managementObject.Properties["DataType"].Value,
                    Description = (string) managementObject.Properties["Description"].Value,
                    Document = (string) managementObject.Properties["Document"].Value,
                    DriverName = (string) managementObject.Properties["DriverName"].Value,
                    ElapsedTime = (DateTime) managementObject.Properties["ElapsedTime"].Value,
                    HostPrintQueue = (string) managementObject.Properties["HostPrintQueue"].Value,
                    InstallDate = (DateTime) managementObject.Properties["InstallDate"].Value,
                    JobId = (uint) managementObject.Properties["JobId"].Value,
                    JobStatus = (string) managementObject.Properties["JobStatus"].Value,
                    Name = (string) managementObject.Properties["Name"].Value,
                    Notify = (string) managementObject.Properties["Notify"].Value,
                    Owner = (string) managementObject.Properties["Owner"].Value,
                    PagesPrinted = (uint) managementObject.Properties["PagesPrinted"].Value,
                    PaperLength = (uint) managementObject.Properties["PaperLength"].Value,
                    PaperSize = (string) managementObject.Properties["PaperSize"].Value,
                    PaperWidth = (uint) managementObject.Properties["PaperWidth"].Value,
                    Parameters = (string) managementObject.Properties["Parameters"].Value,
                    PrintProcessor = (string) managementObject.Properties["PrintProcessor"].Value,
                    Priority = (uint) managementObject.Properties["Priority"].Value,
                    Size = (uint) managementObject.Properties["Size"].Value,
                    SizeHigh = (uint) managementObject.Properties["SizeHigh"].Value,
                    StartTime = (DateTime) managementObject.Properties["StartTime"].Value,
                    Status = (string) managementObject.Properties["Status"].Value,
                    StatusMask = (uint) managementObject.Properties["StatusMask"].Value,
                    TimeSubmitted = (DateTime) managementObject.Properties["TimeSubmitted"].Value,
                    TotalPages = (uint) managementObject.Properties["TotalPages"].Value,
                    UntilTime = (DateTime) managementObject.Properties["UntilTime"].Value
                });

            return list.ToArray();
        }
    }
}